<%
query_name ||= :custom_query1
query_form_name ||= 'custom_query_form1'

unless @sidebar_queries
  # User can see public queries and his own queries
  visible = ARCondition.new(["is_public = ? OR user_id = ?", true, (@user.logged? ? @user.id : 0)])
  # Project specific queries and global queries
  projects=Project.visible.find(:all)
  project_ids=Array.new
  projects.each do |project|
    project_ids+=[project[:id].to_i]
  end
  visible << ["project_id IS NULL OR project_id IN ( " + project_ids.join(', ') + ")"]
  @sidebar_queries = Query.find(:all,
                                :select => 'id, name, project_id',
                                :order => 'id DESC',
                                :conditions => visible.conditions)
end

do_query = true

if @user.pref[:others][query_name] == nil then
  @user.pref[:others][query_name]=Hash.new
  @user.pref.save
  @user.pref[:others][query_name][:id]=1
  @user.pref[:others][query_name][:limit]=10
  @user.pref.save
end

if params[query_name]=="true" then
  @user.pref[:others][query_name][:id]=params[:query].to_i
  @user.pref[:others][query_name][:limit]=params[:limit].to_i
  @user.pref.save
end

begin
  @query = Query.find(@user.pref[:others][query_name][:id].to_i)
rescue ActiveRecord::RecordNotFound
  # Previously it would handle the error by loading query 1.
  # This renders a friendly error message instead.
  do_query = false
end

%>

<% if do_query then -%>

<span style="display:inline-block"><h3><% if(@query.project_id!=nil) -%><%= Project.visible.find(@query.project_id.to_i).name + " > " %><% end -%><%=h(@query.name)%> (<%= @query.issue_count%>)</h3>
  </span>

  <% # This is just the modify/more links for choosing the query %>
  <%= render(:partial => 'my/block_issues_custom_query_control.rhtml', :locals => {:query_form_name => query_form_name, :query_name => query_name}) %>

<% 
    sort_init(@query.sort_criteria.empty? ? [['id', 'desc']] : @query.sort_criteria)
    sort_update(@query.sortable_columns)
    
        @limit =  @user.pref[:others][query_name][:limit] 
      @issue_count = @query.issue_count
      @issue_pages = ActionController::Pagination::Paginator.new self, @issue_count, @limit, 0
      @offset ||= @issue_pages.current.offset
      @issues = @query.issues(:include => [:assigned_to, :tracker, :priority, :category, :fixed_version],
                              :order => sort_clause, 
                              :offset => @offset, 
                              :limit => @limit)
      @issue_count_by_group = @query.issue_count_by_group
    %>

<%= render(:partial => 'issues/list', :locals => {:issues => @issues, :query => @query}) %>

<% else -%>
  <div><span class='error'>Sorry! This query has been deleted.</span></div>
  <% # This is just the modify/more links for choosing the query %>
  <%= render :partial => 'my/block_issues_custom_query_control.rhtml', :locals => {:query_form_name => query_form_name, :query_name => query_name} %>

<% end %>
